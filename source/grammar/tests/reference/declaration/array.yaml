# indent w/ 2 spaces
source: |
  array[uint[16], 1] x;
  array[int[8], 4] x;
  array[float[64], 4, 2] x;
  array[angle[32], 4, 3, 2] x;
  array[bit[8], 2] x;
  array[bit[16], 2, 2] x;
  array[complex[float[32]], 4] x;
  array[bool, 3] x;
  array[int[8], 4] x = {1, 2, 3, 4};
  array[int[8], 4] x = y;
  array[int[8], 2] x = {y, y+y};
  array[uint[32], 2, 2] x = {{3, 4}, {2-3, 5*y}};
  array[uint[32], 2, 2] x = {z, {2-3, 5*y}};
  array[uint[32], 2, 2] x = {2*z, {1, 2}};
  array[uint[32], 2, 2] x = y;
reference: |
  program
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            uint
            designator
              [
              expression
                16
              ]
          ,
          expressionList
            expression
              1
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            int
            designator
              [
              expression
                8
              ]
          ,
          expressionList
            expression
              4
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            float
            designator
              [
              expression
                64
              ]
          ,
          expressionList
            expression
              4
            ,
            expression
              2
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            angle
            designator
              [
              expression
                32
              ]
          ,
          expressionList
            expression
              4
            ,
            expression
              3
            ,
            expression
              2
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            bit
            designator
              [
              expression
                8
              ]
          ,
          expressionList
            expression
              2
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            bit
            designator
              [
              expression
                16
              ]
          ,
          expressionList
            expression
              2
            ,
            expression
              2
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            complex
            [
            scalarType
              float
              designator
                [
                expression
                  32
                ]
            ]
          ,
          expressionList
            expression
              4
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            bool
          ,
          expressionList
            expression
              3
          ]
        x
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            int
            designator
              [
              expression
                8
              ]
          ,
          expressionList
            expression
              4
          ]
        x
        =
        declarationExpression
          arrayLiteral
            {
            expression
              1
            ,
            expression
              2
            ,
            expression
              3
            ,
            expression
              4
            }
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            int
            designator
              [
              expression
                8
              ]
          ,
          expressionList
            expression
              4
          ]
        x
        =
        declarationExpression
          expression
            y
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            int
            designator
              [
              expression
                8
              ]
          ,
          expressionList
            expression
              2
          ]
        x
        =
        declarationExpression
          arrayLiteral
            {
            expression
              y
            ,
            expression
              expression
                y
              +
              expression
                y
            }
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            uint
            designator
              [
              expression
                32
              ]
          ,
          expressionList
            expression
              2
            ,
            expression
              2
          ]
        x
        =
        declarationExpression
          arrayLiteral
            {
            arrayLiteral
              {
              expression
                3
              ,
              expression
                4
              }
            ,
            arrayLiteral
              {
              expression
                expression
                  2
                -
                expression
                  3
              ,
              expression
                expression
                  5
                *
                expression
                  y
              }
            }
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            uint
            designator
              [
              expression
                32
              ]
          ,
          expressionList
            expression
              2
            ,
            expression
              2
          ]
        x
        =
        declarationExpression
          arrayLiteral
            {
            expression
              z
            ,
            arrayLiteral
              {
              expression
                expression
                  2
                -
                expression
                  3
              ,
              expression
                expression
                  5
                *
                expression
                  y
              }
            }
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            uint
            designator
              [
              expression
                32
              ]
          ,
          expressionList
            expression
              2
            ,
            expression
              2
          ]
        x
        =
        declarationExpression
          arrayLiteral
            {
            expression
              expression
                2
              *
              expression
                z
            ,
            arrayLiteral
              {
              expression
                1
              ,
              expression
                2
              }
            }
        ;
    statement
      classicalDeclarationStatement
        arrayType
          array
          [
          scalarType
            uint
            designator
              [
              expression
                32
              ]
          ,
          expressionList
            expression
              2
            ,
            expression
              2
          ]
        x
        =
        declarationExpression
          expression
            y
        ;
    <EOF>
